import os
import platform
import subprocess
import random
import pyttsx3
import speech_recognition as sr
from datetime import datetime
import requests
import json
from dotenv import load_dotenv

from gtts import gTTS # –æ–∑–≤—É—á–∫–∞
import tempfile

load_dotenv()

# ========== –ö–õ–Æ–ß –î–û GROQ ==========
GROQ_API_KEY = os.environ.get("GROQ_API_KEY") or ""
if not GROQ_API_KEY:
    raise RuntimeError("GROQ_API_KEY is not set")

# ========== –ì–ª–æ–±–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ==========
MODEL = "llama-3.3-70b-versatile"  # –ê–∫—Ç—É–∞–ª—å–Ω–∏–π
GROQ_URL = "https://api.groq.com/openai/v1/chat/completions"

VOICE_GENDER = "female"  # "female" –∞–±–æ "male"
VOICE_VOLUME = 1.0  # 0.0 - 1.0
VOICE_RATE = 150  # –¢–µ–º–ø (–∑–≤—É–∫/—Ö–≤)

# ========== –ö–æ–º–∞–Ω–¥–∏-–∞–∫—Ç–∏–≤–∞—Ç–æ—Ä–∏ ==========
JOKES = [
    "–ô–¥–µ —Å—Ç—É–¥–µ–Ω—Ç –ø–æ –∫–æ—Ä–∏–¥–æ—Ä—É, –±–∞—á–∏—Ç—å ‚Äî —Å–µ—Å—ñ—è. –Ü —Ö–æ–≤–∞—î—Ç—å—Å—è.",
    "–ü—Ä–æ–≥—Ä–∞–º—ñ—Å—Ç ‚Äî —Ü–µ –º–∞—à–∏–Ω–∞ –¥–ª—è –ø–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–∞–≤–∏ –≤ –∫–æ–¥.",
    "–ü–µ—Å–∏–º—ñ—Å—Ç –±–∞—á–∏—Ç—å —Ç–µ–º—Ä—è–≤—É –≤ —Ç—É–Ω–µ–ª—ñ, –æ–ø—Ç–∏–º—ñ—Å—Ç ‚Äî —Å–≤—ñ—Ç–ª–æ, —ñ–Ω–∂–µ–Ω–µ—Ä ‚Äî –ø–æ—Ç—è–≥, –º–∞—à–∏–Ω—ñ—Å—Ç ‚Äî –¥–≤–æ—Ö –¥—É—Ä–Ω—ñ–≤ –Ω–∞ —Ä–µ–π–∫–∞—Ö."
]

TIPS = [
    "–ù–µ –∑–∞–±—É–≤–∞–π —Ä–æ–±–∏—Ç–∏ –ø–∞—É–∑–∏ –ø—ñ–¥ —á–∞—Å —Ä–æ–±–æ—Ç–∏ –∑–∞ –∫–æ–º–ø‚Äô—é—Ç–µ—Ä–æ–º.",
    "–ü–∏–π –±—ñ–ª—å—à–µ –≤–æ–¥–∏, —Ç–≤—ñ–π –º–æ–∑–æ–∫ –±—É–¥–µ –≤–¥—è—á–Ω–∏–π.",
    "–ù—ñ–∫–æ–ª–∏ –Ω–µ –±—ñ–π—Å—è –ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–æ—Å—å –Ω–æ–≤–µ ‚Äî —Ç–∞–∫ –∑‚Äô—è–≤–ª—è—î—Ç—å—Å—è –¥–æ—Å–≤—ñ–¥."
]

# –õ–æ–≥ —Ñ–∞–π–ª—É –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤
LOG_FILE = "jarvis_log.json"

COMMANDS = {
    "—è–∫–∞ –≥–æ–¥–∏–Ω–∞": lambda: f"–ó–∞—Ä–∞–∑ {datetime.now().strftime('%H:%M')}",
    "—è–∫–∞ –¥–∞—Ç–∞": lambda: f"–°—å–æ–≥–æ–¥–Ω—ñ {datetime.now().strftime('%d.%m.%Y')}",
    "–∞–Ω–µ–∫–¥–æ—Ç": lambda: random.choice(JOKES),
    "–ø–æ—Ä–∞–¥–∞ –¥–Ω—è": lambda: random.choice(TIPS),
}


# ========= –õ–æ–≥—É–≤–∞–Ω–Ω—è ==========
def log_conversation(user_text, assistant_text):
    entry = {
        "timestamp": datetime.now().isoformat(),
        "user": user_text,
        "assistant": assistant_text
    }
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(json.dumps(entry, ensure_ascii=False) + "\n")


def show_history(n=3):
    # –ó—á–∏—Ç—É—î–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ n –∑–∞–ø–∏—Å—ñ–≤ —ñ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ —ó—Ö —Ç–µ–∫—Å—Ç–æ–º
    if not os.path.exists(LOG_FILE):
        return "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è."

    with open(LOG_FILE, "r", encoding="utf-8") as f:
        lines = f.readlines()

    last_entries = lines[-n:]
    history_text = ""
    for line in last_entries:
        try:
            entry = json.loads(line)
            ts = entry.get("timestamp", "")
            user = entry.get("user", "")
            assistant = entry.get("assistant", "")
            history_text += f"\n[{ts}]\n–¢–∏: {user}\n–î–∂–∞—Ä–≤—ñ—Å: {assistant}\n"
        except:
            continue

    return history_text if history_text else "–Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤ –ø–æ–∫–∏ —â–æ –ø–æ—Ä–æ–∂–Ω—è."


# ========== –û–∑–≤—É—á–∫–∞ ==========
def init_tts_engine():
    engine = pyttsx3.init()
    voices = engine.getProperty('voices')

    print("\nüéôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ñ –≥–æ–ª–æ—Å–∏:")
    for i, voice in enumerate(voices):
        print(f"{i}: {voice.name} - {voice.id}")

    # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≥–æ–ª–æ—Å –∑–∞ –∑–∞–¥–∞–Ω–∏–º VOICE_GENDER, —è–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ª–∏—à–∞—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω–∏–π
    selected_voice_id = None
    for voice in voices:
        # –ß–∞—Å—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ gender (–º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ –∫—Ä–∞—â–µ)
        name_lower = voice.name.lower()
        if VOICE_GENDER == "female" and "female" in name_lower:
            selected_voice_id = voice.id
            break
        elif VOICE_GENDER == "male" and "male" in name_lower:
            selected_voice_id = voice.id
            break

    if selected_voice_id:
        engine.setProperty('voice', selected_voice_id)

    engine.setProperty('volume', VOICE_VOLUME)
    engine.setProperty('rate', VOICE_RATE)
    return engine


def speak_ua(text):
    engine = init_tts_engine()
    engine.say(text)
    engine.runAndWait()

# def play_audio(path):
#     system = platform.system()
#     try:
#         if system == "Darwin":
#             subprocess.run(["afplay", path])
#         elif system == "Windows":
#             os.startfile(path)
#         else:
#             subprocess.run(["mpg123", path])
#     except Exception as e:
#         print(f"Error playing audio: {e}")
#
# def speak_ua(text):
#     if not text:
#         return
#     try:
#         tts = gTTS(text=text, lang="uk")
#         with tempfile.NamedTemporaryFile(suffix=".mp3", delete=False) as fp:
#             path = fp.name
#         tts.save(path)
#         play_audio(path)
#         # close player
#         # kill process
#         os.remove(path)
#     except Exception as e:
#         print("–ù–µ –≤–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç–∏!", e)


# –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ –≤ —Ä–∞–º–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ (—è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ)
def change_volume(new_volume):
    global VOICE_VOLUME
    VOICE_VOLUME = min(max(new_volume, 0.0), 1.0)
    print(f"üîä –ì—É—á–Ω—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {VOICE_VOLUME}")
    # –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –¥–≤–∏–∂–∫–∞, —è–∫—â–æ –≤—ñ–Ω –≤ –≥–ª–æ–±–∞–ª—å–Ω—ñ–π –∑–º—ñ–Ω–Ω—ñ–π


# ========== –í–∏–±—ñ—Ä –≥–æ–ª–æ—Å—É ==========
def choose_voice_settings():
    global VOICE_GENDER, VOICE_VOLUME, VOICE_RATE

    print("\nüéôÔ∏è –û–±–µ—Ä–∏ –≥–æ–ª–æ—Å:")
    print("1. üë© –ñ—ñ–Ω–æ—á–∏–π")
    print("2. üë® –ß–æ–ª–æ–≤—ñ—á–∏–π")
    choice = input("–í–∏–±—ñ—Ä (1/2): ").strip()
    VOICE_GENDER = "female" if choice == "1" else "male"

    vol = input("üîä –í–≤–µ–¥–∏ –≥—É—á–Ω—ñ—Å—Ç—å (0.0 –¥–æ 1.0, –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º 1.0): ").strip()
    try:
        VOICE_VOLUME = min(max(float(vol), 0.0), 1.0)
    except:
        VOICE_VOLUME = 1.0

    rate = input("üöÄ –í–≤–µ–¥–∏ —à–≤–∏–¥–∫—ñ—Å—Ç—å –º–æ–≤–∏ (—Ç–∏–ø–æ–≤–æ 150): ").strip()
    try:
        VOICE_RATE = int(rate)
    except:
        VOICE_RATE = 150


# ========== –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –≥–æ–ª–æ—Å—É ==========
def choose_microphone():
    print("\nüé§ –î–æ—Å—Ç—É–ø–Ω—ñ –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∏:")
    for idx, name in enumerate(sr.Microphone.list_microphone_names()):
        print(f"{idx}: {name}")
    try:
        index = int(input("–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –º—ñ–∫—Ä–æ—Ñ–æ–Ω–∞: "))
        return index
    except:
        print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–≤—ñ–¥. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –º—ñ–∫—Ä–æ—Ñ–æ–Ω –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º.")
        return None


def listen_ukrainian(device_index=None, timeout=5, phrase_time_limit=20):
    r = sr.Recognizer()
    with sr.Microphone(device_index=device_index) as source:
        print("üéß –ì–æ–≤–æ—Ä–∏ —â–æ—Å—å —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é...")
        r.adjust_for_ambient_noise(source, duration=0.8)
        try:
            audio = r.listen(source, timeout=timeout, phrase_time_limit=phrase_time_limit)
            text = r.recognize_google(audio, language="uk-UA")
            print("üó£Ô∏è –¢–∏ —Å–∫–∞–∑–∞–≤(–ª–∞):", text)
            return text
        except sr.WaitTimeoutError:
            print("‚åõ –¢–∞–π–º-–∞—É—Ç: –Ω—ñ—á–æ–≥–æ –Ω–µ –ø–æ—á—É—Ç–æ.")
        except Exception as err:
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:", err)
    return None


# ========== –ó–∞–ø–∏—Ç –¥–æ GROQ ==========
def ask_groq(prompt, history=None):
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }

    messages = [
        {"role": "system", "content": "–¢–∏ ‚Äî —Ä–æ–∑—É–º–Ω–∏–π, –¥–æ–±—Ä–æ–∑–∏—á–ª–∏–≤–∏–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –∞—Å–∏—Å—Ç–µ–Ω—Ç. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —á—ñ—Ç–∫–æ –π –ø—Ä–æ—Å—Ç–æ."}
    ]

    if history:
        messages += history[-10:]  # –æ—Å—Ç–∞–Ω–Ω—ñ 10 –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    messages.append({"role": "user", "content": prompt})

    payload = {
        "model": MODEL,
        "messages": messages,
        "temperature": 0.7,
        "max_tokens": 500,
        "stream": False
    }

    try:
        res = requests.post(GROQ_URL, headers=headers, json=payload)
        if res.status_code != 200:
            print(f"‚ùå –ü–æ–º–∏–ª–∫–∞ API: {res.status_code} {res.text}")
            return "–í–∏–±–∞—á, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—ñ –¥–æ –®–Ü."
        data = res.json()
        return data["choices"][0]["message"]["content"]
    except Exception as err:
        print("‚ùå –ó–∞–ø–∏—Ç –Ω–µ –≤–¥–∞–ª–æ—Å—å –≤–∏–∫–æ–Ω–∞—Ç–∏:", err)
        return "–ù–∞ –∂–∞–ª—å, –Ω–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ –®–Ü."


# ========== –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ==========
def main():
    print("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –î–∂–∞—Ä–≤—ñ—Å ‚Äî —Ç–≤—ñ–π –≥–æ–ª–æ—Å–æ–≤–∏–π –ø–æ–º—ñ—á–Ω–∏–∫.")
    choose_voice_settings()
    mic_index = choose_microphone()
    conversation_history = []

    try:
        while True:
            query = listen_ukrainian(device_index=mic_index)
            if not query:
                continue

            query_l = query.lower().strip()

            # –í–∏—Ö—ñ–¥
            if query_l in ["–≤–∏–π—Ç–∏", "–¥—è–∫—É—é", "–∑–∞–≤–µ—Ä—à–∏—Ç–∏", "—Å—Ç–æ–ø"]:
                print("üëã –ë—É–≤–∞–π!")
                speak_ua("–ë—É–≤–∞–π!")
                break

            # –ö–æ–º–∞–Ω–¥–∞ –ø–æ–∫–∞–∑–∞—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
            if query_l == "–ø–æ–∫–∞–∂–∏ —ñ—Å—Ç–æ—Ä—ñ—é":
                history_text = show_history(n=3)
                print(history_text)
                speak_ua(history_text)
                continue

            # –ö–æ–º–∞–Ω–¥–∞ –∑–º—ñ–Ω–∏ –≥—É—á–Ω–æ—Å—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–≥—É—á–Ω—ñ—Å—Ç—å 0.7")
            if query_l.startswith("–≥—É—á–Ω—ñ—Å—Ç—å"):
                parts = query_l.split()
                if len(parts) == 2:
                    try:
                        vol = float(parts[1])
                        change_volume(vol)
                        speak_ua(f"–ì—É—á–Ω—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {vol}")
                    except ValueError:
                        speak_ua("–ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –≥—É—á–Ω–æ—Å—Ç—ñ.")
                else:
                    speak_ua("–°–∫–∞–∂–∏ '–≥—É—á–Ω—ñ—Å—Ç—å' —Ç–∞ —á–∏—Å–ª–æ –≤—ñ–¥ 0 –¥–æ 1.")
                continue

            # –Ü–Ω—à—ñ –∫–æ–º–∞–Ω–¥–∏
            if query_l in COMMANDS:
                answer = COMMANDS[query_l]()
                print("üß≠ –ö–æ–º–∞–Ω–¥–∞:", query_l)
                print("üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å:", answer)
                speak_ua(answer)
                # –õ–æ–≥—É–≤–∞–Ω–Ω—è
                log_conversation(query, answer)
                continue

            # –ó–∞–ø–∏—Ç –¥–æ –®–Ü
            print("ü§ñ –î—É–º–∞—é...")
            answer = ask_groq(query, history=conversation_history)
            print("üì§ –í—ñ–¥–ø–æ–≤—ñ–¥—å:", answer)

            conversation_history.append({"role": "user", "content": query})
            conversation_history.append({"role": "assistant", "content": answer})
            conversation_history = conversation_history[-20:]

            speak_ua(answer)
            # –õ–æ–≥—É–≤–∞–Ω–Ω—è
            log_conversation(query, answer)

    except KeyboardInterrupt:
        print("\nüõë –í–∏—Ö—ñ–¥ —á–µ—Ä–µ–∑ Ctrl+C. –î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")
        speak_ua("–î–æ –∑—É—Å—Ç—Ä—ñ—á—ñ!")



# ========== –¢–æ—á–∫–∞ –≤—Ö–æ–¥—É ==========
if __name__ == "__main__":
    main()
