import pandas as pd

# ========== № 1 ==========
books = pd.DataFrame({
    "Название": ["Книга1", "Книга2", "Книга3", "Книга4", "Книга5", "Книга6"],
    "Автор":    ["Иванов", "Петров", "Сидоров", "Кузнецов", "Смирнов", "Орлов"],
    "Год":      [2010, 2018, 2020, 2015, 2008, 2022],
    "Цена":     [300, 400, 250, 500, 350, 600]
})
print("Таблица книг:\n", books)

avg_price = books["Цена"].mean()
print("Средняя цена книг:", avg_price)

after_2015 = books[books["Год"] > 2015]
print("Книги после 2015 года:\n", after_2015)

sorted_books = books.sort_values("Цена")
print("Отсортировано по цене (возрастание):\n", sorted_books)


# ========== № 2 ==========
orders_df = pd.DataFrame({
    "Номер":  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    "Клиент": ["Анна","Боб","Анна","Том","Боб","Ира","Том","Боб","Анна","Ира"],
    "Дата":   ["2024-01-10","2024-01-11","2024-01-12","2024-01-12",
               "2024-01-13","2024-01-13","2024-01-14","2024-01-15",
               "2024-01-16","2024-01-17"],
    "Сумма":  [500, 300, 700, 200, 450, 600, 400, 350, 800, 150]
})
print("Первые 10 строк:\n", orders_df.head(10))

order_counts = orders_df["Клиент"].value_counts()
print("Количество заказов у каждого клиента:\n", order_counts)

print("Макс. сумма:", orders_df["Сумма"].max(),
      "Мин. сумма:", orders_df["Сумма"].min())

print("Общая сумма всех заказов:", orders_df["Сумма"].sum())


# ========== № 3 ==========
foods = pd.DataFrame({
    "Продукт":   ["Хлеб","Молоко","Сыр","Яблоко","Стейк","Печенье",
                  "Орехи","Картофель","Рис","Творог"],
    "Категория": ["Зерновые","Молочные","Молочные","Фрукты","Мясо","Сладости",
                  "Орехи","Овощи","Зерновые","Молочные"],
    "Калории":   [250, 60, 350, 52, 420, 480, 600, 77, 330, 290],
    "Белки":     [8, 3, 25, 0, 26, 6, 18, 2, 7, 12]
})
print("Продукты:\n", foods)

high_cal = foods[foods["Калории"] > 300]
print("Калорийность > 300:\n", high_cal)

avg_protein = foods.groupby("Категория")["Белки"].mean()
print("Средние белки по категориям:\n", avg_protein)

sorted_foods = foods.sort_values("Калории", ascending=False)
print("Сортировка по калориям (убывание):\n", sorted_foods)


# ========== № 4 ==========
employees = pd.DataFrame({
    "Имя":    ["Анна","Боб","Анна","Том","Ира","Том","Анна","Ира"],
    "Проект": ["A","A","B","B","A","C","C","B"],
    "Часы":   [10, 8, 15, 12, 9, 20, 7, 14]
})
print("Сотрудники и часы:\n", employees)

hours_by_emp = employees.groupby("Имя")["Часы"].sum()
print("Часы по сотрудникам:\n", hours_by_emp)

hours_by_proj = employees.groupby("Проект")["Часы"].sum()
print("Часы по проектам:\n", hours_by_proj)

top_employee = hours_by_emp.idxmax()
print("Больше всего часов отработал:", top_employee)


# ========== № 5 ==========
tickets = pd.DataFrame({
    "Фильм": ["Ф1","Ф1","Ф2","Ф3","Ф2","Ф1","Ф3","Ф2","Ф4","Ф4","Ф3","Ф2"],
    "Город": ["Киев","Львов","Киев","Одесса","Львов","Одесса","Киев","Днепр","Львов","Киев","Днепр","Одесса"],
    "Билеты": [120,80,150,100,60,75,130,90,50,40,200,110]
})
print("Продажи билетов:\n", tickets)

by_film = tickets.groupby("Фильм")["Билеты"].sum()
print("Количество билетов по фильмам:\n", by_film)

by_city = tickets.groupby("Город")["Билеты"].sum()
print("Количество билетов по городам:\n", by_city)

best_film = by_film.idxmax()
print("Больше всего продаж у фильма:", best_film)


# ========== № 6 ==========
clients = pd.DataFrame({
    "ID":   [1, 2, 3, 4, 5],
    "Имя":  ["Анна","Боб","Том","Ира","Марк"],
    "Город": ["Киев","Львов","Одесса","Днепр","Киев"]
})
orders = pd.DataFrame({
    "ID_клиента": [1,2,2,3,5,1,4],
    "Заказ":     ["Книга","Стол","Стул","Ручка","Телефон","Лампа","Кружка"],
    "Стоимость": [500, 2000, 800, 50, 1200, 300, 100]
})
print("Клиенты:\n", clients)
print("Заказы:\n", orders)

merged = pd.merge(clients, orders, left_on="ID", right_on="ID_клиента")
print("Объединённая таблица:\n", merged)

total_per_client = merged.groupby(["ID","Имя"])["Стоимость"].sum().reset_index()
total_per_client.rename(columns={"Стоимость":"Сумма заказов"}, inplace=True)
print("Итоговая сумма заказов:\n", total_per_client)

